#!/bin/bash



if ! command -v jq &> /dev/null; then
    yum install -y jq
fi

cat /etc/profile.d/proxy_setings.sh
echo "
#!/bin/sh
unset https_proxy
unset http_proxy
" >> /etc/profile.d/proxy_setings.sh

# Volume expansion
printf 'n\n\n\n\n\nw' | fdisk /dev/nvme0n1
partprobe
pvcreate /dev/nvme0n1p3
vgextend vgroot /dev/nvme0n1p3
lvextend -L +39G /dev/mapper/vgroot-lvapps
lvextend -L +20G /dev/mapper/vgroot-lvroot
lvextend -l +100%FREE /dev/mapper/vgroot-lvvar
xfs_growfs /dev/mapper/vgroot-lvapps
xfs_growfs /dev/mapper/vgroot-lvroot
xfs_growfs /dev/mapper/vgroot-lvvar

# Starting Docker
systemctl start docker

# Setup Maven
mkdir /root/.m2
chmod 777 /root/.m2
cd /root/.m2
curl -u jenkins:jenkins123 -O https://oneartifactoryci.verizon.com/artifactory/AnsiblePlus-virtual/nts/gquv/apache/Maven/settings.xml

# Setup Jenkins tools
mkdir -p /apps/opt/jenkins/tools
cd /apps/opt/jenkins/tools/
curl -u SVC-GQUV-GIT-PROD:ProvisioningGatewayAdmin18 -O https://oneartifactoryci.verizon.com/artifactory/GQUV_PORCH_INFRA-virtual/EKS/NonProd/%7Bpath-to-kubeconfig%7D
mv %7Bpath-to-kubeconfig%7D /root/{path-to-kubeconfig}

# Setup SonarQube Runner
curl -u jenkins:jenkins123 -O https://oneartifactoryci.verizon.com/artifactory/AnsiblePlus-virtual/nts/gquv/SonarQube/hudson.plugins.sonar.SonarRunnerInstallation.zip
unzip hudson.plugins.sonar.SonarRunnerInstallation.zip
chmod 777 -R /apps/opt/jenkins/tools

# Setup Go
cd /apps/opt
curl -u jenkins:jenkins123 -O https://oneartifactoryci.verizon.com/artifactory/AnsiblePlus-virtual/nts/gquv/GO/go1.17.1.linux-amd64.tar.gz
tar -C /usr/local -xzf go1.17.1.linux-amd64.tar.gz
curl -u jenkins:jenkins123 -O https://oneartifactoryci.verizon.com/artifactory/AnsiblePlus-virtual/nts/gquv/GO/go_workspace.zip
unzip go_workspace.zip

# Setup Maven
curl -u jenkins:jenkins123 -O https://oneartifactoryci.verizon.com/artifactory/AnsiblePlus-virtual/nts/gquv/apache/Maven/apache-maven-3.6.3-bin.tar.gz
tar -xvf apache-maven-3.6.3-bin.tar.gz
cat /etc/profile.d/maven_home.sh
echo "
#!/bin/sh
export M2_HOME=/apps/opt/apache-maven-3.6.3
export MAVEN_HOME=/apps/opt/apache-maven-3.6.3
export PATH=${M2_HOME}/bin:${PATH}
" >> /etc/profile.d/maven_home.sh

# Crontab
crontab <<EOF
$(crontab -l)
00 23 * * * rm -rf /tmp
EOF

# Jenkins CLI setup and error handling
mkdir -p /apps/opt/nts2
cd /apps/opt/nts2
curl -O https://jenkins-nts2.vpc.verizon.com/nts2/jnlpJars/agent.jar
curl -O https://jenkins-nts2.vpc.verizon.com/nts2/jnlpJars/jenkins-cli.jar

# Setup environment
yum-config-manager --disable docker-ce-stable
yum update -y
yum install -y java-11-openjdk.x86_64 java-11-openjdk-devel
yum install -y maven
yum install -y java-17-openjdk.x86_64 java-17-openjdk-devel
yum install -y java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel
alternatives --set java java-11-openjdk.x86_64

# Kubectl setup
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

# Helm setup
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh

# Cleanup
yum remove -y log4j
#thishost=$(curl -L 169.254.169.254/latest/dynamic/instance-identity/document | jq -r .instanceId)

# AWS instance metadata
TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
thishost=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .instanceId)

# Jenkins CLI commands with error handling
if ! java -jar jenkins-cli.jar -s https://jenkins-nts2.vpc.verizon.com/nts2/ -auth SVC-GQUV-GIT-PROD:1145963a865c7667f58c4c39b0ad4c2c3b -http get-node NTS-GQUV-PORCH-INFRASTRUCTURE; then
    echo -e "\033[34mFailed to get node configuration\033[0m"
    exit 1
fi

if ! java -jar jenkins-cli.jar -s https://jenkins-nts2.vpc.verizon.com/nts2 -auth  SVC-GQUV-GIT-PROD:1145963a865c7667f58c4c39b0ad4c2c3b -http create-node $thishost; then
    echo -e "\033[34mFailed to create node\033[0m"
    exit 1
fi

# Retrieve secret token for Jenkins agent
#secrttoken=$(curl -L -s -u SVC-GQUV-GIT-PROD:1145963a865c7667f58c4c39b0ad4c2c3b -X GET https://jenkins-nts2.vpc.verizon.com/nts2/computer/$thishost/slave-agent.jnlp | sed "s/.*<application-desc main-class=\"hudson.remoting.jnlp.Main\"><argument>\([a-z0-9]*\).*/\1/")
secrttoken=$(curl -L -s -u SVC-GQUV-GIT-PROD:1145963a865c7667f58c4c39b0ad4c2c3b -X GET https://jenkins-nts2.vpc.verizon.com/nts2/computer/$thishost/slave-agent.jnlp | sed "s/.*<application-desc><argument>\([a-z0-9]*\).*/\1/")
cat /apps/opt/nts2/agent.sh

# Jenkins agent connection with retry logic
echo "while true; do
    if java -jar agent.jar -jnlpUrl https://jenkins-nts2.vpc.verizon.com/nts2/computer/$thishost/slave-agent.jnlp -secret $secrttoken; then
        break
    else
        echo -e '\033[34mFailed to connect, retrying in 10 seconds...\033[0m'
        sleep 10
    fi
done" >> /apps/opt/nts2/agent.sh

chmod 777 /apps/opt/nts2/agent.sh

# Run the Jenkins agent in the background
nohup ./agent.sh &

bash -l
